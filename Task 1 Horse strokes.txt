using System;

class HorseStrokes
{
    static void Main()
    {
        Console.WriteLine("Enter the coordinates of the horse on a chessboard (for example A1):");
        string userInput = Console.ReadLine().ToUpper();

        if (userInput.Length != 2 || !char.IsLetter(userInput[0]) || !char.IsDigit(userInput[1]))
        {
            Console.WriteLine("Invalid input. Please enter coordinates in the format, for example, A1.");
            return;
        }

        int column = userInput[0] - 'A';
        int row = int.Parse(userInput[1].ToString()) - 1;

        if (column < 0 || column >= 8 || row < 0 || row >= 8)
        {
            Console.WriteLine("Invalid coordinates. Please enter coordinates within the chessboard range.");
            return;
        }

        int[,] horseStrokes = GenerateHorseStrokes(row, column);

        Console.WriteLine("Horse strokes matrix:");
        PrintMatrix(horseStrokes);
    }

    static int[,] GenerateHorseStrokes(int row, int column)
    {
        int[,] matrix = new int[8, 8];

        int[,] moves = {
            { 2, 1 }, { 1, 2 },
            { -1, 2 }, { -2, 1 },
            { -2, -1 }, { -1, -2 },
            { 1, -2 }, { 2, -1 }
        };

        matrix[row, column] = 9;

        for (int i = 0; i < moves.GetLength(0); i++)
        {
            int newRow = row + moves[i, 1];
            int newColumn = column + moves[i, 0];

            if (newRow >= 0 && newRow < 8 && newColumn >= 0 && newColumn < 8)
            {
                matrix[newRow, newColumn] = 1;
            }
        }

        return matrix;
    }

    static void PrintMatrix(int[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                Console.Write($"{matrix[i, j]} ");
            }
            Console.WriteLine();
        }
    }
}
